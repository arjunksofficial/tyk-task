// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"

	"github.com/arjunksofficial/tyk-task/internal/token/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// DeleteToken provides a mock function for the type MockService
func (_mock *MockService) DeleteToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockService_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockService_Expecter) DeleteToken(ctx interface{}, token interface{}) *MockService_DeleteToken_Call {
	return &MockService_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, token)}
}

func (_c *MockService_DeleteToken_Call) Run(run func(ctx context.Context, token string)) *MockService_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_DeleteToken_Call) Return(err error) *MockService_DeleteToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockService_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function for the type MockService
func (_mock *MockService) GetToken(ctx context.Context, token string) (models.TokenData, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 models.TokenData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.TokenData, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.TokenData); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(models.TokenData)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockService_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockService_Expecter) GetToken(ctx interface{}, token interface{}) *MockService_GetToken_Call {
	return &MockService_GetToken_Call{Call: _e.mock.On("GetToken", ctx, token)}
}

func (_c *MockService_GetToken_Call) Run(run func(ctx context.Context, token string)) *MockService_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetToken_Call) Return(tokenData models.TokenData, err error) *MockService_GetToken_Call {
	_c.Call.Return(tokenData, err)
	return _c
}

func (_c *MockService_GetToken_Call) RunAndReturn(run func(ctx context.Context, token string) (models.TokenData, error)) *MockService_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementRateLimit provides a mock function for the type MockService
func (_mock *MockService) IncrementRateLimit(ctx context.Context, token string) (int64, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IncrementRateLimit")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_IncrementRateLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementRateLimit'
type MockService_IncrementRateLimit_Call struct {
	*mock.Call
}

// IncrementRateLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockService_Expecter) IncrementRateLimit(ctx interface{}, token interface{}) *MockService_IncrementRateLimit_Call {
	return &MockService_IncrementRateLimit_Call{Call: _e.mock.On("IncrementRateLimit", ctx, token)}
}

func (_c *MockService_IncrementRateLimit_Call) Run(run func(ctx context.Context, token string)) *MockService_IncrementRateLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_IncrementRateLimit_Call) Return(n int64, err error) *MockService_IncrementRateLimit_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockService_IncrementRateLimit_Call) RunAndReturn(run func(ctx context.Context, token string) (int64, error)) *MockService_IncrementRateLimit_Call {
	_c.Call.Return(run)
	return _c
}

// StoreToken provides a mock function for the type MockService
func (_mock *MockService) StoreToken(ctx context.Context, token models.TokenData) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.TokenData) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_StoreToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreToken'
type MockService_StoreToken_Call struct {
	*mock.Call
}

// StoreToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token models.TokenData
func (_e *MockService_Expecter) StoreToken(ctx interface{}, token interface{}) *MockService_StoreToken_Call {
	return &MockService_StoreToken_Call{Call: _e.mock.On("StoreToken", ctx, token)}
}

func (_c *MockService_StoreToken_Call) Run(run func(ctx context.Context, token models.TokenData)) *MockService_StoreToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.TokenData
		if args[1] != nil {
			arg1 = args[1].(models.TokenData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_StoreToken_Call) Return(err error) *MockService_StoreToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_StoreToken_Call) RunAndReturn(run func(ctx context.Context, token models.TokenData) error) *MockService_StoreToken_Call {
	_c.Call.Return(run)
	return _c
}
